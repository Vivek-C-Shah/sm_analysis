import gradio as gr
import pandas as pd
import matplotlib.pyplot as plt
from data_pipeline import DataPipeline  # Import your existing DataPipeline
from typing import List

pipeline = DataPipeline()

def load_data(data_source, database_collection, csv_file):
    """Loads data from either database or CSV."""
    if data_source == "Load from Database":
        if not database_collection:
            raise ValueError("Please select a database collection.")
        try:
            collection_data = pipeline.get_collection_data(database_collection)
            df = pd.DataFrame(list(collection_data))
        except Exception as e:
             raise Exception (f"Failed to load data from database: {e}")
    elif data_source == "Upload CSV File":
        if not csv_file:
           raise ValueError("Please upload a CSV file.")
        try:
            df = pipeline.read_csv(csv_file.name)
        except Exception as e:
             raise Exception (f"Failed to load data from CSV: {e}")

    else:
      raise ValueError("Invalid Data Source Selected")
    
    return df

def update_data_preview(data):
    """Updates the data preview table."""
    if data is not None and not data.empty:
        return data.head().to_dict('records')
    else:
        return []
        
def get_post_types(data):
    """Extracts unique post types from the DataFrame"""
    if data is not None and not data.empty:
       return ["All Post Types"] + data["post_type"].unique().tolist()
    return ["All Post Types"]


def calculate_engagement_metrics(data, selected_post_type, metric_types):
  """Calculates and returns engagement metrics based on selection """
  if data is None or data.empty:
    return pd.DataFrame()
  if selected_post_type == "All Post Types":
    metrics_df = pipeline.get_engagement_metrics_by_post_type(data)
  else:
    filtered_data = data[data["post_type"] == selected_post_type]
    metrics_df = pipeline.get_engagement_metrics(filtered_data)

  if metric_types:
    metrics_df = metrics_df[["post_type"] + metric_types]
  
  return metrics_df


def generate_insights(metrics_df: pd.DataFrame, prompt_len: int = 300) -> str:
    """Generates insights using the DataPipeline and the LLM."""
    if metrics_df.empty:
        return "No data to generate insights from."

    system_prompt = pipeline.generate_system_prompt()
    payload = pipeline.generate_payload(metrics_df, system_prompt)
    insights = pipeline.get_engagement_insights(payload)

    if insights:
      return insights[:prompt_len]
    else:
      return "No insights generated by the Langflow API."


def plot_comparison(data:pd.DataFrame, compare_by: str, metric_types: List[str]) -> plt.Figure:
  """
  Generates comparative plots of the specified metrics by post type or date.
  """
  if data is None or data.empty:
      return None

  if compare_by == 'post_type':
      metrics_df = pipeline.get_engagement_metrics_by_post_type(data)
  elif compare_by == 'date':
        metrics_df = pipeline.get_engagement_metrics_by_date(data)
  else:
        return None
        
  if metrics_df.empty:
      return None
  if not metric_types:
    return None
  
  metrics_df = metrics_df[[compare_by] + metric_types]
  metrics_df = metrics_df.set_index(compare_by)


  fig, ax = plt.subplots(figsize=(10,6))
  metrics_df.plot(kind='bar', ax=ax)
  ax.set_title(f'Metric Comparison by {compare_by}')
  ax.set_ylabel('Values')
  ax.tick_params(axis='x', rotation=45)
  plt.tight_layout()
  return fig


def update_analysis(data, selected_post_type, metric_types, prompt_len, compare_by ):
   """
   Updates and handles the outputs of the analysis tab based on user input.

   """
   if data is None or data.empty:
        return None, "", None # return empty df, text and figure

   engagement_metrics = calculate_engagement_metrics(data, selected_post_type, metric_types)
   insights = generate_insights(engagement_metrics, prompt_len)
   comparison_plot = plot_comparison(data, compare_by, metric_types)

   return engagement_metrics, insights, comparison_plot



# --- Gradio Interface ---
with gr.Blocks() as demo:
    gr.Markdown("# Social Media Engagement Analysis Tool")

    with gr.Tab("Data Loading"):
        with gr.Row():
            data_source = gr.Radio(
              choices=["Load from Database", "Upload CSV File"],
              label="Select Data Source",
              value="Load from Database"
            )
        with gr.Row():
            database_collection = gr.Dropdown(
                choices=pipeline.list_collections(),
                label="Database Collection",
                visible=True
            )
            csv_file = gr.File(label="Upload CSV File", file_types=[".csv"], visible=False)
        load_button = gr.Button("Load Data")
        data_preview = gr.Dataframe(label="Data Preview")

    with gr.Tab("Analysis"):
        with gr.Row():
              post_type_dropdown = gr.Dropdown(
                choices=["All Post Types"],
                label="Select Post Type",
                value="All Post Types"
              )
              metric_types_group = gr.CheckboxGroup(
                choices=[
                    "avg_likes", "avg_shares", "avg_comments", "engagement_rate",
                    "like_to_comment_ratio", "share_to_like_ratio"
                ],
                label="Select Metrics",
                value=["engagement_rate"]
            )
        with gr.Row():
          prompt_length_slider = gr.Slider(
            minimum=100,
            maximum=500,
            value=300,
            label="Prompt Length",
            step=50
          )
        with gr.Row():
            compare_by_radio = gr.Radio(
              choices=["post_type", "date"],
              label="Compare By:",
              value = "post_type"
            )
        with gr.Row():
            analysis_button = gr.Button("Analyze")
        with gr.Row():
            engagement_metrics_output = gr.Dataframe(label="Engagement Metrics")
            engagement_insights_output = gr.Markdown(label="Engagement Insights")
        with gr.Row():
           comparison_plot_output = gr.Plot(label="Metrics Comparison")
           
    with gr.Tab("Settings"):
         gr.Markdown("### Customize Application Settings")

    # --- Event Handling ---
    data_source.change(
        lambda x: [
            gr.update(visible=x == "Load from Database"),
            gr.update(visible=x == "Upload CSV File")
        ],
        inputs=[data_source],
        outputs=[database_collection, csv_file]
    )
    load_button.click(
        load_data,
        inputs=[data_source, database_collection, csv_file],
        outputs=[data_preview],
        api_name="load_data"
    ).then(
        update_data_preview,
        inputs = [load_data],
        outputs = [data_preview]
    ).then(
        get_post_types,
        inputs = [load_data],
        outputs = [post_type_dropdown]
    )

    analysis_button.click(
      update_analysis,
      inputs = [load_data, post_type_dropdown, metric_types_group, prompt_length_slider, compare_by_radio],
      outputs = [engagement_metrics_output, engagement_insights_output, comparison_plot_output],
      api_name="update_analysis"
    )

# if __name__ == "__main__":
demo.launch()